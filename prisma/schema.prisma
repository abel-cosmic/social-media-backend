// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
    id             String   @id @default(uuid())
    username       String   @unique
    email          String   @unique
    password       String
    bio            String?  @db.Text
    profilePicture String?
    role           Role     @default(USER)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // Relations
    posts    Post[]
    comments Comment[]
    likes    Like[]
    ratings  Rating[]
}

model Post {
    id        String   @id @default(uuid())
    userId    String
    mediaFile String
    caption   String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    comments Comment[]
    likes    Like[]
    ratings  Rating[]
}

model Comment {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    content   String   @db.Text
    parentId  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
    replies Comment[] @relation("CommentReplies")
}

model Like {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    // Unique constraint to prevent multiple likes from the same user on the same post
    @@unique([userId, postId])
}

model Rating {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    value     Int      @db.TinyInt // 1-5 stars
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    // Unique constraint to prevent multiple ratings from the same user on the same post
    @@unique([userId, postId])
}
